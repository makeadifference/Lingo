MODEL:
! The (Jet) Taxi Routing Problem.
 Given a set of desired flights or trips to be covered,
 figure out how to route planes/vehicles to cover these flights.
 Repositioning/deadheading flights are allowed at a cost.
 This model illustrate several features:
  1) Calendar routines for coordinating the times of
      flights involving different locations and time zones,
  2) The @INSERT( ) function for creating a derived set
      of repositioning/deadhead legs according to fairly arbitrary rules.
      We do not know in advance which deadhead legs might be needed.
  3) Charting/Graphing routines for displaying a network;
! Define the data structures;
SETS:
 CITY: INITA, GMTOFF, LATI, LNGT;
 LEG;
 CXC( CITY, CITY): TRVTIM;
 ! Loaded legs;
 LODPAIR( LEG, CITY, CITY): Year, Month, Day, Hour, Minute, 
      DLTIME, Y, PLFLAG,
      DCITY, ACITY, ALTIME;
 RLEG;
! Reposition city pairs;
 RPAIR( RLEG, CITY, CITY): DRTIME, U;
 DOW /SUN..SAT/;  ! Days of week;
 CARCS: ORG, DST; ! List to be created of OD pairs;
! Set of repositioning legs actually used;
 RPAIRU(RLEG, CITY, CITY): DUCITY, AUCITY, DUTIME, AUTIME ;
ENDSETS

DATA:
! Scalar data;
  NRPLG = 1000;
  NLLG = 7;
  VL = 1;     ! Relative value of covering a loaded flight;
  RP = 0.35;  ! Relative cost of a repositioning flight;
  RA = 0.8;   ! Relative cost of an aircraft;
  LA = 2;     ! Limit on number of aircraft;

  RLEG = 1..NRPLG; ! Possible number of repositioning legs;
  LEG = 1..NLLG; ! Get data on each loaded candidate OD pair;

! Vector data;
!  The Cities;
      City,      GMTOFF,  LATI,    LNGT=  ! Cities, their offset in hours from GMT, Lat and Long;
! 1; Chicago         -6  41.8500  -87.6500 !  Chicago is 6 hours behind Greenwich Mean Time;
! 2; Salt_Lake_City  -7  40.7500 -111.8833 
! 3; Los_Angeles     -8  34.0522 -118.2428
! 4; Phoenix         -7  33.4833 -112.0667
! 5; Las_Vegas       -8  36.1667 -115.2000
! 6; Tucson          -7  32.2217 -110.9258;

!  The city pair trips we want to cover/service;
  LODPAIR, Year, Month, Day, Hour, Minute = 
!	Origin         Destination		Departure time              
LEG	City	              City	   Year    Month	Day Hour Minute ;
1     Los_Angeles      Salt_Lake_City  2014    11     22   10     0   
2     Salt_Lake_City   Phoenix         2014    11     24   16    20   
3     Salt_Lake_City   Los_Angeles     2014    11     25   16     0 
4     Phoenix          Chicago         2014    11     23    9    10
4     Salt_Lake_City   Las_Vegas       2014    11     26   16     0   
5     Las_Vegas        Salt_Lake_City  2014    11     27   12     0   
6     Tucson           Salt_Lake_City  2014    11     23   13     0   
7     Chicago          Las_Vegas       2014    11     22   15    30  
;

! Matrix data;
!  Get travel time matrix in minutes;
!  Chi   SLC   LAX   Phn   LVg   Tuc;
  TRVTIM = 
    0   190   240   205   215   195  ! Chicago;
  190     0   110   100    85   120  ! Salt_Lake_City;
  240   110     0   120   120   120  ! Los_Angeles;
  205   100   120     0    85    60  ! Phoenix;
  215    85   120    85     0    95  ! Las_Vegas;
  195   120   120    60    95     0 ;! Tucson;

ENDDATA

SUBMODEL ROUTEM:
 ! Variables:
      Y(n,d,a) = 1 if we do flight leg n, 
                    from city d to city a,
      U(n,d,a) = 1 if we do the nth possible deadheading flight,
                    from city d to city a;

 ! Maximize number of requested flights flown 
  - cost of repositioning flights
  - cost of aircraft;
  MAX = VL*@SUM( LODPAIR( n, d, a): Y(n,d,a)) ! Loaded flights;
      - RP*@SUM( RPAIR( n, d, a): U(n,d,a)) ! Repositions;
      - RA*@SUM( CITY(i): INITA(i)); ! Initial AC at city i;

 ! You either fly it or you do not;
  @FOR( LODPAIR( n, d, a): @BIN(Y(n,d,a)));
  @FOR( RPAIR( n, d, a): @BIN(U(n,d,a)));

 ! For every departing loaded flight from d to a at time DLTIME,
  the number of earlier arrivals - earlier departures must be >= Y(n,d,a);
 @FOR( LODPAIR( n, d, a):
  [LFLO] INITA(d)                ! Note, scalar time is in seconds, not minutes;
  + @SUM( LODPAIR( n1, d1, d) | DLTIME(n1,d1,d) + TRVTIM(d1,d)*60 #LE# DLTIME(n,d,a):
       Y(n1,d1,d))  ! loaded flights into d;
  + @SUM( RPAIR( n1, d1, d) | DRTIME(n1,d1,d) + TRVTIM(D1,d)*60 #LE# DLTIME(n,d,a):
       U(n1,d1,d))  ! Dead-head (unloaded) flights into d;
  - @SUM(LODPAIR(n1,d,a1) | DLTIME(n1,d,a1) #LT# DLTIME(n,d,a):
       Y(n1,d,a1))  ! Loaded flights out of d;
  - @SUM( RPAIR(n1,d,a1) | DRTIME(n1,d,a1) #LE# DLTIME(n,d,a):
       U(n1,d,a1))  ! Dead head flights out;
   >= Y(n,d,a);
     );

! For every departing repositioning flight from d to a at time DRTIME,
  the number of earlier arrivals - earlier departures must be >= U(n,d,a);
 @FOR( RPAIR( n, d, a):
  [RFLO] INITA(d)                 ! Note, scalar time is in seconds, not minutes;
  + @SUM( LODPAIR( n1, d1, d) | DLTIME(n1,d1,d) + TRVTIM(d1,d)*60 #LE# DRTIME(n,d,a):
       Y(n1,d1,d))  ! loaded flights into d;
  + @SUM( RPAIR( n1, d1, d) | DRTIME(n1,d1,d) + TRVTIM(d1,d)*60 #LE# DRTIME(n,d,a):
       U(n1,d1,d))  ! Dead-head (unloaded) flights into d;
  - @SUM(LODPAIR(n1,d,a1) | DLTIME(n1,d,a1) #LE# DRTIME(n,d,a):
       Y(n1,d,a1))  ! Loaded flights out of d;
  - @SUM( RPAIR(n1,d,a1) | a1 #NE# a #AND# (DRTIME(n1,d,a1) #LE# DRTIME(n,d,a)):
       U(n1,d,a1))  ! Dead head flights out;
   >= U(n,d,a);
     );

  ! Limit on number of aircraft;
   @SUM( CITY(i): INITA(i)) <= LA; 
ENDSUBMODEL

PROCEDURE PLOTIT:
 
 ! Draw a geographic network of flights;
   @CHARTNETNODE( 
        ' Latt/Long Display of Cities and Flights'    ! Title of chart;
      , 'Latitude', 'Longitude' ! Labels for horizontal and vertical;
      , 'Flights to cover'      ! Legend for arc set 1;
      , LNGT, LATI              ! Coordinates of the nodes;
      , DCITY, ACITY);          ! Node pairs of arcs;

  ! Get ready to draw a space time diagram;
  TBASE = @MIN(LODPAIR(n,d,a): DLTIME(n,d,a)); ! Earliest departure time;
  ! Build the set of repositioning legs actually used;
  NUMREP = 0;
  @FOR( RPAIR(n,d,a) | U(n,d,a) #GT# 0.5:
     NUMREP = NUMREP + 1;
     @INSERT( RPAIRU, n, d, a); 
     DUCITY(n,d,a)= d;  ! Departure city;
     AUCITY(n,d,a)= a;  ! Arrival city;
     DUTIME(n,d,a)= (DRTIME(n,d,a)-TBASE)/3600; ! Depart time in hours from TBASE;
     AUTIME(n,d,a)= (DRTIME(n,d,a) + TRVTIM(d,a)*60-TBASE)/3600; ! Arrive time;  
     );
  @FOR( LODPAIR(n,d,a): ! Get time in hours from TBASE of loaded arcs;
     DLTIME(n,d,a) = (DLTIME(n,d,a)-TBASE)/3600;
     ALTIME(n,d,a) = (ALTIME(n,d,a)-TBASE)/3600;
      );

 ! Draw a space-time diagram...;
  @IFC( NUMREP #GT# 0:
      ! Case: 1 or more repositioning flights;
     @CHARTNETARC( 'Space/Time Diagram of Flights',
       'Time in hours', 'City', 
       'Desired flights', 
        DLTIME, DCITY, ALTIME, ACITY,
       'Reposition flights',
        DUTIME, DUCITY, AUTIME, AUCITY);

    @ELSE
      ! Case: No repositioning flights;
     @CHARTNETARC( 'Space/Time Diagram of Flights',
       'Time in hours', 'City', 
       'Desired flights', 
        DLTIME, DCITY, ALTIME, ACITY);
        NUMREP = 0;
    );
ENDPROCEDURE

PROCEDURE WriteFlatFile:
 ! Send scalar values used/found to a flat file;
 @DIVERT('RouteParams.txt'); ! Open a file;
! Write the header;
  @WRITE('   Parameter      Value',@NEWLINE(1));

 @WRITE(
   ' Trip_Value          ',VL, @NEWLINE(1),
   ' ReposnCost          ',RP, @NEWLINE(1),
   ' RelAircraftCost     ',RA, @NEWLINE(1),
   ' NumAircraftAllowed  ',LA, @NEWLINE(1));
 @DIVERT( ); ! Close the file;

 ! Send City specific data to a flat file;
  @DIVERT('RouteCity.txt'); ! Open a file;
 ! Write the header;
  @WRITE( '              CITY       LATI      LNGT    GMTOFF  INITA',@NEWLINE(1));

 @FOR( CITY(i):
   @WRITE( ' ', @FORMAT(CITY(i),'18s'), ' ', @FORMAT(LATI(i),'10.3f'), ' ', 
       @FORMAT(LNGT(i),'10.3f'), ,'     ', GMTOFF(i), '   ',  INITA, @NEWLINE(1));
     );
 @DIVERT( ); ! Close the file;
 
! Write info on loaded trips flown to a flat file;
 @DIVERT('RouteLoad.txt'); ! Open a file;
! Write the header;
  @WRITE('        CITY_01             CITY_02       yyyy mm dd hr mm dwk',@NEWLINE(1));
  ! A while loop to print the legs used, sorted by DLTIME;
 @FOR( LODPAIR( n, d, a): PLFLAG(n,d,a) = 1); ! PLFLAG = 0 if already printed;
 MORE = 1;
 @WHILE(MORE:
  MORE = 0;
  CTIME = 9999999999;
  @FOR( LODPAIR( n, d, a) | PLFLAG(n,d,a) #AND# (Y(n,d,a) #GT# 0.5):
    CTEMP = DLTIME(n,d,a);
    @IFC( CTEMP #LT# CTIME:
      MORE = 1;
      CTIME = CTEMP;
      nsv=n; dsv=d; asv=a;
        );
     ); 
  
  @IFC( MORE:
    PLFLAG(nsv,dsv,asv) = 0;
!  Convert DLTIME(n,d,a) back to year month, day, hour minute;
    CTIME = CTIME + 3600*GMTOFF(dsv); ! Take into account local time, convert hrs to secs;
    IYR, IMON, IDAY, IWKD, IHR, IMIN, ISEC = @STM2YMD( ctime);
    @WRITE( @FORMAT(CITY(dsv),'18s') ,'   ',@FORMAT(CITY(asv),'18s'),'   ',IYR,'  ',
    IMON,'  ',@FORMAT(IDAY,'2.0F'),' ',@FORMAT(IHR,'2.0F'),' ',@FORMAT(IMIN,'2.0F'),'  ',DOW(IWKD),@NEWLINE(1));
    );
  );
 @DIVERT(); ! Close the file;

! Write info on repositioning flights to flat file;
 @DIVERT('RouteRepo.txt'); ! Open a file;
! Write the header;
 @WRITE('        CITY_01            CITY_02         yyyy mm dd hr mm dwk',@NEWLINE(1));
 @FOR( RPAIR( n, d, a) | U(n,d,a) #GT# 0.5:
  ! Convert DRTIME(n,d,a) back to year month, day, hour minute;
    CTIME = DRTIME(n,d,a)+ 3600*GMTOFF(d); ! Take into account local time, convert hrs to secs;
    IYR, IMON, IDAY, IWKD, IHR, IMIN, ISEC = @STM2YMD( ctime);

    @WRITE( @FORMAT(CITY(d),'18s'),'   ',@FORMAT(CITY(a),'18s'),'   ',IYR,'  ',
    IMON,'  ',@FORMAT(IDAY,'2.0F'),' ',@FORMAT(IHR,'2.0F'),'  ',@FORMAT(IMIN,'2.0F'),' ',DOW(IWKD),@NEWLINE(1));
    );

 @DIVERT(); ! Close the file;
ENDPROCEDURE

CALC:
  @SET( 'TERSEO', 2);  ! Set output to terse;
  ! Convert Year, Month, Day, Hour, Minute(n,d,a) to a scalar DLTIME(n,d,a)
    so we can do simple comparisons and arithmetic;
  ! Compute departure time in scalar GMT time for each loaded flight;
  @FOR( LODPAIR( n, d, a):
    DLTIME(n,d,a) = @YMD2STM( Year(n,d,a), Month(n,d,a), Day(n,d,a) , Hour(n,d,a), Minute(n,d,a), 0)
                    - 3600*GMTOFF(d); ! Take into account local time, convert hours to seconds;
       ); 

 ! Construct the set of candidate repositioning legs. For each departing
  flight from city j, we add a candidate repositioning leg from every
  other city i, j #NE# i, at TRVTIM(i,j) minutes earlier ;
  k = 0;
  @FOR( LODPAIR( n, j, a):
    @FOR( CITY(i) | i #NE# j:
      k = k+1;
  ! Insert into the RPAIR set, the triple (k, i, j);
      @INSERT( RPAIR, k, i, j); 
  ! Now that the element has been added to the set, we can set its attributes;
      ! Note, travel times are in minutes, scalar TRVTIM(i,j) in seconds;
      DRTIME(k,i,j) = DLTIME(n,j,a) - TRVTIM(i,j)*60;
        );
      );

 !  @GEN( ROUTEM); ! If you want to see the explicit scalar model;

 ! Maximize the value of loaded flights flown, minus cost of 
   repositioning legs and airplanes used;
   @SOLVE( ROUTEM);
   
 ! Write a little report;
 @WRITE(' Value/trip covered= ',VL,@NEWLINE(1),
   ' Relative cost/repositioning= ',RP,@NEWLINE(1),' Relative cost/aircraft= ',RA,
    @NEWLINE(1),' Number aircraft allowed= ',LA, @NEWLINE(1));

 @WRITE(@NEWLINE(1),' Number requested trips covered= ',
     @SUM(LODPAIR(n,d,a)| Y(n,d,a) #GT# 0.5 :1),
     ' (of ',@SUM(LODPAIR(n,d,a) :1),')',@NEWLINE(1));
 @WRITE(' Number aircraft used= ',@SUM(CITY(i):INITA(I)),@NEWLINE(2));
   
 @WRITE(' Cities and their coordinates:',@NEWLINE(1));
 @FOR( CITY(i):
   @WRITE( @FORMAT(CITY(i),'18s'), ' ', @FORMAT(LATI(i),'10.3f'), ' ', 
       @FORMAT(LNGT(i),'10.3f'), ,'     ', GMTOFF(i), '   ',  INITA, @NEWLINE(1));
     );

 @WRITE(@NEWLINE(1),' Initial Aircraft Positions:',@NEWLINE(1),
   '             City   #Aircraft    ', @NEWLINE(1));
 @FOR( CITY(i)| INITA(i) #GT# 0.5:
     @WRITE(@FORMAT(CITY(i),'18s'),'   ', @FORMAT(INITA(i),'3.0f'), @NEWLINE(1));
      );
 @WRITE(@NEWLINE(1));
 @WRITE(@NEWLINE(1),' Trips flown:                             Depart at(local time)',@NEWLINE(1));
 @WRITE('    Origin              Destination       yyyy  mm  dd hr mm  dwk',@NEWLINE(1));
 
 ! A while loop to print the legs used, sorted by DLTIME;
 @FOR( LODPAIR( n, d, a): PLFLAG(n,d,a) = 1); ! PLFLAG = 0 if already printed;
 MORE = 1;
 @WHILE(MORE:
  MORE = 0;
  CTIME = 9999999999;
  @FOR( LODPAIR( n, d, a) | PLFLAG(n,d,a) #AND# (Y(n,d,a) #GT# 0.5):
    CTEMP = DLTIME(n,d,a);
    @IFC( CTEMP #LT# CTIME:
      MORE = 1;
      CTIME = CTEMP;
      nsv=n; dsv=d; asv=a;
        );
     ); 
  
  @IFC( MORE:
    PLFLAG(nsv,dsv,asv) = 0;
!  Convert DLTIME(n,d,a) back to year month, day, hour minute;
    CTIME = CTIME + 3600*GMTOFF(dsv); ! Take into account local time, convert hrs to secs;
    IYR, IMON, IDAY, IWKD, IHR, IMIN, ISEC = @STM2YMD( ctime);


    @WRITE( @FORMAT(CITY(dsv),'18s') ,'   ',@FORMAT(CITY(asv),'18s'),'   ',IYR,'  ',
    IMON,'  ',@FORMAT(IDAY,'2.0F'),' ',@FORMAT(IHR,'2.0F'),' ',@FORMAT(IMIN,'2.0F'),'  ',DOW(IWKD),@NEWLINE(1));
    );
  );

!@DIVERT(); ! Close the file;

@WRITE(@NEWLINE(1),' Repositioning Flights:',@NEWLINE(1));
@WRITE('    Origin              Destination       yyyy  mm  dd hh  mm dwk',@NEWLINE(1));

@FOR( RPAIR( n, d, a) | U(n,d,a) #GT# 0.5:
  ! Convert DRTIME(n,d,a) back to year month, day, hour minute;
    CTIME = DRTIME(n,d,a)+ 3600*GMTOFF(d); ! Take into account local time, convert hrs to secs;
    IYR, IMON, IDAY, IWKD, IHR, IMIN, ISEC = @STM2YMD( ctime);

    @WRITE( @FORMAT(CITY(d),'18s'),'   ',@FORMAT(CITY(a),'18s'),'   ',IYR,'  ',
    IMON,'  ',@FORMAT(IDAY,'2.0F'),' ',@FORMAT(IHR,'2.0F'),'  ',@FORMAT(IMIN,'2.0F'),' ',DOW(IWKD),@NEWLINE(1));
    );

! Build vectors to prepare to draw various networks;
   @FOR( LODPAIR(n,d,a):
     DCITY(n,d,a) = d;  ! Departure city of leg;
     ACITY(n,d,a) = a;  ! Arrival city of leg;
! Time that a flight arrives at destination city;
     ALTIME(n,d,a) = DLTIME(n,d,a) + TRVTIM(d,a)*60;
       );

! If we want to plot;
  PLOTIT;
! Write Flat file of input and output;
  WriteFlatFile;
 ENDCALC
END 